{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/Components/results/results.component.html","./src/app/Components/results/results.component.ts","./src/app/app.component.ts.AppComponent.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/questions/questions.component.html","./src/app/components/questions/questions.component.ts","./src/app/components/welcome/welcome.component.html","./src/app/components/welcome/welcome.component.ts","./src/app/question-form/question-form.component.html","./src/app/question-form/question-form.component.ts","./src/app/questions.service.ts","./src/app/quiz.model.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<!--This code uses ngClass to set a correct class to the answer if its model is correct. This let's you style accordingly-->\n<div class=\"results\">\n  <h2>Results</h2>\n  <div\n    class=\"answer\"\n    *ngFor=\"let a of answers.values\"\n    [ngClass]=\"{ correct: a.correct }\"\n  >\n    {{ a.value }}\n  </div>\n  <button mat-raised-button color=\"warn\" [routerLink]=\"['/welcome']\">\n    Choose Another Quiz\n  </button>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Answers } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-results\",\n  templateUrl: \"./results.component.html\",\n  styleUrls: [\"./results.component.scss\"]\n})\nexport class ResultsComponent {\n  //Takes an input called answers of type Answers\n  //Input makes the answers available to the parent component (questions) so it can pass the answers in\n  @Input() answers: Answers;\n}\n","<router-outlet></router-outlet>","// src/app/app.component.ts\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"<router-outlet></router-outlet>\"\n})\nexport class AppComponent {}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { AppComponent } from \"./app.component\";\nimport { QuestionFormComponent } from \"./question-form/question-form.component\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ResultsComponent } from \"./Components/results/results.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { WelcomeComponent } from \"./components/welcome/welcome.component\";\nimport { QuestionsComponent } from \"./components/questions/questions.component\";\n//import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n//Modules for Masterial\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { NavbarComponent } from \"./components/navbar/navbar.component\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { MatGridListModule } from \"@angular/material/grid-list\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatRadioModule } from \"@angular/material/radio\";\n\nconst appRoutes: Routes = [\n  { path: \"welcome\", component: WelcomeComponent },\n  { path: \":quizId\", component: QuestionsComponent },\n  { path: \"\", redirectTo: \"welcome\", pathMatch: \"prefix\" }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionFormComponent,\n    ResultsComponent,\n    WelcomeComponent,\n    QuestionsComponent,\n    NavbarComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    MatMenuModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatGridListModule,\n    MatButtonModule,\n    MatRadioModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","<mat-toolbar class=\"toolbar\">My Quiz App</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-navbar></app-navbar>\n\n<div *ngIf=\"quiz && !questions\" class=\"spinner-grow text-primary\"></div>\n\n<div class=\"quiz\" *ngIf=\"questions\">\n  <div class=\"questions\" *ngIf=\"!showResults\">\n    <app-question-form\n      [question]=\"questions[currentQuestionIndex]\"\n      (onChoiceMade)=\"updateChoice($event)\"\n    >\n    </app-question-form>\n\n    <button\n      mat-raised-button\n      color=\"warn\"\n      class=\"btn btn-success\"\n      (click)=\"nextOrViewResults()\"\n      [disabled]=\"!answers.values[currentQuestionIndex]\"\n    >\n      {{\n        currentQuestionIndex === questions.length - 1 ? \"View Results\" : \"Next\"\n      }}\n    </button>\n  </div>\n  <app-results *ngIf=\"showResults\" [answers]=\"answers\"></app-results>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\n\nimport { QuestionsService } from \"../../questions.service\";\nimport { Quiz, Answers, Choice, Question } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-questions\",\n  templateUrl: \"./questions.component.html\",\n  styleUrls: [\"./questions.component.scss\"]\n})\nexport class QuestionsComponent implements OnInit {\n  //Declare some variables\n  public quiz: Quiz;\n  public answers: Answers;\n  public questions: Question[];\n  public currentQuestionIndex: number;\n\n  public showResults = false;\n\n  //Inject active route and the question service\n  constructor(\n    private route: ActivatedRoute,\n    private questionsService: QuestionsService\n  ) {}\n\n  ngOnInit() {\n    //Read from the browser route and load the correct quiz\n    this.questionsService\n      .getQuestions(this.route.snapshot.params.quizId)\n      .subscribe(questions => {\n        //initialize everything\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}\n","<app-navbar></app-navbar>\n\n<div class=\"welcome\">\n  <h1>Choose a Quiz</h1>\n  <mat-grid-list cols=\"2\">\n    <mat-grid-tile *ngFor=\"let quiz of quizzes\">\n      <mat-card>\n        <mat-card-title>{{ quiz.label }}</mat-card-title>\n        <mat-card-subtitle>{{ quiz.description }}</mat-card-subtitle>\n        <button mat-raised-button color=\"warn\" [routerLink]=\"['/', quiz.name]\">\n          Play The Quiz\n        </button>\n        <!--<a [routerLink]=\"['/', quiz.name]\">Go Play It</a>-->\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { QuestionsService } from \"../../questions.service\";\nimport { Question } from \"src/app/quiz.model\";\nimport { Quiz } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-welcome\",\n  templateUrl: \"./welcome.component.html\",\n  styleUrls: [\"./welcome.component.scss\"]\n})\nexport class WelcomeComponent implements OnInit {\n  quizzes: Quiz[];\n  constructor(private questionsService: QuestionsService) {}\n\n  ngOnInit() {\n    this.questionsService.getQuizzes().subscribe(quiz => {\n      this.quizzes = quiz;\n      console.log(this.quizzes);\n    });\n  }\n}\n","<!--Only shows if there are questions-->\n<div class=\"quiz\" *ngIf=\"question\">\n  <h1>{{ question.label }}</h1>\n  <form [formGroup]=\"form\">\n    <div class=\"form-group\">\n      <label *ngFor=\"let choice of question.choices\">\n        <input type=\"radio\" [value]=\"choice\" formControlName=\"choice\" />\n        <span>{{ choice.value }}</span>\n      </label>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Question } from \"../quiz.model\";\n\n//Link up our elements in this decorator\n@Component({\n  selector: \"app-question-form\",\n  templateUrl: \"./question-form.component.html\",\n  styleUrls: [\"./question-form.component.scss\"]\n})\nexport class QuestionFormComponent implements OnInit {\n  @Input() question: Question;\n  @Output() onChoiceMade = new EventEmitter<string>();\n\n  public form: FormGroup;\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      choice: new FormControl()\n    });\n\n    //Subscribe to changes in the form\n    this.form.valueChanges.subscribe(this.onChange);\n  }\n\n  onChange = () => {\n    this.onChoiceMade.emit(this.form.value.choice);\n  };\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Quiz, Question } from \"./quiz.model\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class QuestionsService {\n  constructor(private http: HttpClient) {}\n\n  //The RxJs observable piping feature let's your function perform asynchronously like a promise. .pipe is the same as .then\n\n  ///get our quiz list\n  public getQuizzes() {\n    return this.http.get(\"../assets/quiz-list.json\").pipe(\n      map((result: any[]) => {\n        return result.map(\n          r => new Quiz(r.label, r.name, r.description, r.fileName)\n        );\n      })\n    );\n  }\n\n  //Get questions\n  public getQuestions(fileName: string) {\n    return this.http.get(`../assets/${fileName}.json`).pipe(\n      map((result: any[]) => {\n        return result.map(r => new Question(r.label, r.choices));\n      })\n    );\n  }\n}\n","export class Choice {\n  constructor(public value: string, public correct?: boolean) {}\n}\n\nexport class Question {\n  constructor(public label: string, public choices: Choice[]) {}\n}\n\nexport class Quiz {\n  constructor(\n    public label: string,\n    public name: string,\n    public description: string,\n    public fileName: string\n  ) {}\n}\n\nexport class Answers {\n  constructor(public values: Choice[] = []) {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}