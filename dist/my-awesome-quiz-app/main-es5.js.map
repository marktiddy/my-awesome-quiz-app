{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Components/results/results.component.html","webpack:///src/app/Components/results/results.component.ts","webpack:///src/app/app.component.ts.AppComponent.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/questions/questions.component.html","webpack:///src/app/components/questions/questions.component.ts","webpack:///src/app/components/welcome/welcome.component.html","webpack:///src/app/components/welcome/welcome.component.ts","webpack:///src/app/question-form/question-form.component.html","webpack:///src/app/question-form/question-form.component.ts","webpack:///src/app/questions.service.ts","webpack:///src/app/quiz.model.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ResultsComponent","AppComponent","appRoutes","path","component","redirectTo","pathMatch","AppModule","NavbarComponent","QuestionsComponent","route","questionsService","showResults","getQuestions","snapshot","params","quizId","subscribe","questions","answers","currentQuestionIndex","choice","values","length","quiz","undefined","WelcomeComponent","getQuizzes","quizzes","console","log","QuestionFormComponent","onChoiceMade","onChange","emit","form","value","valueChanges","QuestionsService","http","get","pipe","result","map","r","label","name","description","fileName","choices","Choice","correct","Question","Quiz","Answers","environment","production","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<!--This code uses ngClass to set a correct class to the answer if its model is correct. This let's you style accordingly-->\n<div class=\"results\">\n  <h2>Results</h2>\n  <div\n    class=\"answer\"\n    *ngFor=\"let a of answers.values\"\n    [ngClass]=\"{ correct: a.correct }\"\n  >\n    {{ a.value }}\n  </div>\n  <button mat-raised-button color=\"warn\" [routerLink]=\"['/welcome']\">\n    Choose Another Quiz\n  </button>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\nimport { Answers } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-results\",\n  templateUrl: \"./results.component.html\",\n  styleUrls: [\"./results.component.scss\"]\n})\nexport class ResultsComponent {\n  //Takes an input called answers of type Answers\n  //Input makes the answers available to the parent component (questions) so it can pass the answers in\n  @Input() answers: Answers;\n}\n","<router-outlet></router-outlet>","// src/app/app.component.ts\nimport { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"<router-outlet></router-outlet>\"\n})\nexport class AppComponent {}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { AppComponent } from \"./app.component\";\nimport { QuestionFormComponent } from \"./question-form/question-form.component\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { ResultsComponent } from \"./Components/results/results.component\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { WelcomeComponent } from \"./components/welcome/welcome.component\";\nimport { QuestionsComponent } from \"./components/questions/questions.component\";\n//import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n//Modules for Masterial\nimport { MatMenuModule } from \"@angular/material/menu\";\nimport { NavbarComponent } from \"./components/navbar/navbar.component\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatDividerModule } from \"@angular/material/divider\";\nimport { MatGridListModule } from \"@angular/material/grid-list\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatRadioModule } from \"@angular/material/radio\";\n\nconst appRoutes: Routes = [\n  { path: \"welcome\", component: WelcomeComponent },\n  { path: \":quizId\", component: QuestionsComponent },\n  { path: \"\", redirectTo: \"welcome\", pathMatch: \"prefix\" }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionFormComponent,\n    ResultsComponent,\n    WelcomeComponent,\n    QuestionsComponent,\n    NavbarComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    MatMenuModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatGridListModule,\n    MatButtonModule,\n    MatRadioModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","<mat-toolbar class=\"toolbar\">My Quiz App</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-navbar></app-navbar>\n\n<div *ngIf=\"quiz && !questions\" class=\"spinner-grow text-primary\"></div>\n\n<div class=\"quiz\" *ngIf=\"questions\">\n  <div class=\"questions\" *ngIf=\"!showResults\">\n    <app-question-form\n      [question]=\"questions[currentQuestionIndex]\"\n      (onChoiceMade)=\"updateChoice($event)\"\n    >\n    </app-question-form>\n\n    <button\n      mat-raised-button\n      color=\"warn\"\n      class=\"btn btn-success\"\n      (click)=\"nextOrViewResults()\"\n      [disabled]=\"!answers.values[currentQuestionIndex]\"\n    >\n      {{\n        currentQuestionIndex === questions.length - 1 ? \"View Results\" : \"Next\"\n      }}\n    </button>\n  </div>\n  <app-results *ngIf=\"showResults\" [answers]=\"answers\"></app-results>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs/operators\";\n\nimport { QuestionsService } from \"../../questions.service\";\nimport { Quiz, Answers, Choice, Question } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-questions\",\n  templateUrl: \"./questions.component.html\",\n  styleUrls: [\"./questions.component.scss\"]\n})\nexport class QuestionsComponent implements OnInit {\n  //Declare some variables\n  public quiz: Quiz;\n  public answers: Answers;\n  public questions: Question[];\n  public currentQuestionIndex: number;\n\n  public showResults = false;\n\n  //Inject active route and the question service\n  constructor(\n    private route: ActivatedRoute,\n    private questionsService: QuestionsService\n  ) {}\n\n  ngOnInit() {\n    //Read from the browser route and load the correct quiz\n    this.questionsService\n      .getQuestions(this.route.snapshot.params.quizId)\n      .subscribe(questions => {\n        //initialize everything\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}\n","<app-navbar></app-navbar>\n\n<div class=\"welcome\">\n  <h1>Choose a Quiz</h1>\n  <mat-grid-list cols=\"2\">\n    <mat-grid-tile *ngFor=\"let quiz of quizzes\">\n      <mat-card>\n        <mat-card-title>{{ quiz.label }}</mat-card-title>\n        <mat-card-subtitle>{{ quiz.description }}</mat-card-subtitle>\n        <button mat-raised-button color=\"warn\" [routerLink]=\"['/', quiz.name]\">\n          Play The Quiz\n        </button>\n        <!--<a [routerLink]=\"['/', quiz.name]\">Go Play It</a>-->\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { QuestionsService } from \"../../questions.service\";\nimport { Question } from \"src/app/quiz.model\";\nimport { Quiz } from \"../../quiz.model\";\n\n@Component({\n  selector: \"app-welcome\",\n  templateUrl: \"./welcome.component.html\",\n  styleUrls: [\"./welcome.component.scss\"]\n})\nexport class WelcomeComponent implements OnInit {\n  quizzes: Quiz[];\n  constructor(private questionsService: QuestionsService) {}\n\n  ngOnInit() {\n    this.questionsService.getQuizzes().subscribe(quiz => {\n      this.quizzes = quiz;\n      console.log(this.quizzes);\n    });\n  }\n}\n","<!--Only shows if there are questions-->\n<div class=\"quiz\" *ngIf=\"question\">\n  <h1>{{ question.label }}</h1>\n  <form [formGroup]=\"form\">\n    <div class=\"form-group\">\n      <label *ngFor=\"let choice of question.choices\">\n        <input type=\"radio\" [value]=\"choice\" formControlName=\"choice\" />\n        <span>{{ choice.value }}</span>\n      </label>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Question } from \"../quiz.model\";\n\n//Link up our elements in this decorator\n@Component({\n  selector: \"app-question-form\",\n  templateUrl: \"./question-form.component.html\",\n  styleUrls: [\"./question-form.component.scss\"]\n})\nexport class QuestionFormComponent implements OnInit {\n  @Input() question: Question;\n  @Output() onChoiceMade = new EventEmitter<string>();\n\n  public form: FormGroup;\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      choice: new FormControl()\n    });\n\n    //Subscribe to changes in the form\n    this.form.valueChanges.subscribe(this.onChange);\n  }\n\n  onChange = () => {\n    this.onChoiceMade.emit(this.form.value.choice);\n  };\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { Quiz, Question } from \"./quiz.model\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class QuestionsService {\n  constructor(private http: HttpClient) {}\n\n  //The RxJs observable piping feature let's your function perform asynchronously like a promise. .pipe is the same as .then\n\n  ///get our quiz list\n  public getQuizzes() {\n    return this.http.get(\"../assets/quiz-list.json\").pipe(\n      map((result: any[]) => {\n        return result.map(\n          r => new Quiz(r.label, r.name, r.description, r.fileName)\n        );\n      })\n    );\n  }\n\n  //Get questions\n  public getQuestions(fileName: string) {\n    return this.http.get(`../assets/${fileName}.json`).pipe(\n      map((result: any[]) => {\n        return result.map(r => new Question(r.label, r.choices));\n      })\n    );\n  }\n}\n","export class Choice {\n  constructor(public value: string, public correct?: boolean) {}\n}\n\nexport class Question {\n  constructor(public label: string, public choices: Choice[]) {}\n}\n\nexport class Quiz {\n  constructor(\n    public label: string,\n    public name: string,\n    public description: string,\n    public fileName: string\n  ) {}\n}\n\nexport class Answers {\n  constructor(public values: Choice[] = []) {}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}